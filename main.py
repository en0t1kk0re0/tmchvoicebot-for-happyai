import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from utils import remove_file
from openaiclient import process_voice_message, get_assistant_response, generate_voice_response
from config import settings
from aiogram.types import FSInputFile
from openaiclient import validate_value, save_value

TELEGRAM_BOT_TOKEN=settings.TELEGRAM_BOT_TOKEN
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
import os

print("BOT_TOKEN –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", os.getenv("TELEGRAM_BOT_TOKEN"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.voice)
async def handle_voice_message(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file = await bot.get_file(message.voice.file_id)
        file_path = f"voice_{message.voice.file_id}.ogg"
        download_path = f"./{file_path}"
        await bot.download_file(file.file_path, download_path)
        print(f"File ID: {message.voice.file_id}")
        print(f"File Path: {file.file_path}")

        print(1)
        if not os.path.exists(file_path):
            await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        user_text, _ = await process_voice_message(file_path)
        print(2)
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_response = await get_assistant_response(user_text, settings.ASSISTANT_ID)
        print(3)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        voice_file_path = await generate_voice_response(assistant_response)
        print(4)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å—é
        if await validate_value(assistant_response):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await save_value(message.from_user.id, assistant_response)
            await message.answer("‚úÖ –¶–µ–Ω–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        else:
            await message.answer("‚ö†Ô∏è –¶–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        voice_file = FSInputFile(voice_file_path)
        await message.answer_voice(voice=voice_file)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        remove_file(file_path)
        remove_file(voice_file_path)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

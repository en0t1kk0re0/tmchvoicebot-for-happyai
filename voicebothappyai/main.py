print("—Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω")
import os
import asyncio
from tempfile import NamedTemporaryFile
from dotenv import load_dotenv
from pydantic_settings import BaseSettings
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from openai import AsyncOpenAI
from dotenv import dotenv_values

env_vars = dotenv_values(".env")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä—É—á–Ω—É—é

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class Settings(BaseSettings):
    TELEGRAM_BOT_TOKEN: str
    OPENAI_API_KEY: str
    ASSISTANT_ID: str

    class Config:
        env_file = ".env"
        env_file_encoding = 'utf-8'

settings = Settings()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())  # –£–∫–∞–∑–∞–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)

async def process_voice_message(message: Message) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Whisper"""
    voice = message.voice
    file = await bot.get_file(voice.file_id)
    ext = file.file_path.split('.')[-1]

    with NamedTemporaryFile(suffix=f".{ext}", delete=False) as tmp:
        await bot.download_file(file.file_path, tmp.name)
        temp_path = tmp.name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Ñ–∞–π–ª–∞

    try:
        with open(temp_path, "rb") as audio_file:
            transcript = await client.audio.transcriptions.create(
                file=audio_file,
                model="whisper-1"
            )
    finally:
        os.remove(temp_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    return transcript.text

async def get_assistant_response(prompt: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Assistant API"""
    thread = await client.beta.threads.create()
    
    await client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=prompt
    )
    
    run = await client.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=settings.ASSISTANT_ID
    )
    
    while True:
        run = await client.beta.threads.runs.retrieve(
            thread_id=thread.id,
            run_id=run.id
        )
        if run.status == "completed":
            break
        await asyncio.sleep(1)
    
    messages = await client.beta.threads.messages.list(thread_id=thread.id)
    return messages.data[0].content[0].text.value

async def generate_voice_response(text: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ TTS"""
    response = await client.audio.speech.create(
        model="tts-1",
        voice="nova",
        input=text
    )
    return response.read()

async def send_voice_response(message: Message, audio_data: bytes):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    with NamedTemporaryFile(delete=False, suffix=".ogg") as temp_audio:
        temp_audio.write(audio_data)
        temp_audio_path = temp_audio.name

    try:
        voice_file = FSInputFile(temp_audio_path)
        await message.answer_voice(voice=voice_file)
    finally:
        os.remove(temp_audio_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

@dp.message(F.voice)
async def handle_voice_message(message: Message):
    try:
        # –®–∞–≥ 1: –ì–æ–ª–æ—Å -> –¢–µ–∫—Å—Ç
        user_text = await process_voice_message(message)
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_response = await get_assistant_response(user_text)
        
        # –®–∞–≥ 3: –¢–µ–∫—Å—Ç -> –ì–æ–ª–æ—Å
        audio_data = await generate_voice_response(assistant_response)
        
        # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await send_voice_response(message, audio_data)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
